import 'package:flutter/material.dart';
import 'package:awesome_notifications/awesome_notifications.dart';
import '../../models/index.dart';

class Notifier {
  // Notification channels
  static const String taskChannelKey = 'task_channel';
  static const String sleepChannelKey = 'sleep_channel';
  static const int sleepNotificationId = 0;

  /// Kh·ªüi t·∫°o notification service
  static Future<void> initialize() async {
    await AwesomeNotifications().initialize(
      null, // App icon (s·∫Ω d√πng icon m·∫∑c ƒë·ªãnh)
      [
        NotificationChannel(
          channelKey: taskChannelKey,
          channelName: 'Task Reminders',
          channelDescription: 'Nh·∫Øc nh·ªü c√¥ng vi·ªác c·∫ßn l√†m',
          defaultColor: const Color(0xFF9D50DD),
          ledColor: Colors.white,
          importance: NotificationImportance.High,
          channelShowBadge: true,
          playSound: true,
        ),
        NotificationChannel(
          channelKey: sleepChannelKey,
          channelName: 'Sleep Reminders',
          channelDescription: 'Nh·∫Øc nh·ªü gi·ªù ƒëi ng·ªß',
          defaultColor: const Color(0xFF5B9DD4),
          ledColor: Colors.white,
          importance: NotificationImportance.High,
          channelShowBadge: true,
          playSound: true,
        ),
      ],
    );
  }

  /// T·∫°o notification ID t·ª´ task index
  /// Offset +1 ƒë·ªÉ tr√°nh conflict v·ªõi sleepNotificationId (0)
  static int _getTaskNotificationId(int taskIndex) {
    return taskIndex + 1;
  }

  /// ƒêƒÉng k√Ω nh·∫Øc vi·ªác c·∫ßn l√†m
  /// [taskIndex] - Index c·ªßa task trong Hive box
  /// [task] - Task c·∫ßn nh·∫Øc
  /// [minutesBefore] - S·ªë ph√∫t nh·∫Øc tr∆∞·ªõc
  static Future<void> scheduleTaskReminder({
    required int taskIndex,
    required ScheduleTask task,
    required int minutesBefore,
  }) async {
    if (task.isCompleted) return;

    final now = DateTime.now();
    final taskDateTime = DateTime(
      now.year,
      now.month,
      now.day,
      task.startTime.hour,
      task.startTime.minute,
    );
    
    final reminderTime = taskDateTime.subtract(Duration(minutes: minutesBefore));

    // Ch·ªâ schedule n·∫øu th·ªùi gian nh·∫Øc ch∆∞a qua
    if (reminderTime.isAfter(now)) {
      await AwesomeNotifications().createNotification(
        content: NotificationContent(
          id: _getTaskNotificationId(taskIndex),
          channelKey: taskChannelKey,
          title: 'S·∫Øp ƒë·∫øn gi·ªù l√†m vi·ªác! ‚è∞',
          body: '${task.title} s·∫Ω b·∫Øt ƒë·∫ßu trong $minutesBefore ph√∫t',
          notificationLayout: NotificationLayout.Default,
          payload: {'type': 'task', 'index': taskIndex.toString()},
        ),
        schedule: NotificationCalendar(
          year: reminderTime.year,
          month: reminderTime.month,
          day: reminderTime.day,
          hour: reminderTime.hour,
          minute: reminderTime.minute,
          second: 0,
          millisecond: 0,
        ),
      );
    }
  }

  /// ƒêƒÉng k√Ω nh·∫Øc gi·ªù ƒëi ng·ªß h√†ng ng√†y
  /// [settings] - UserSettings ch·ª©a th√¥ng tin nh·∫Øc ng·ªß
  static Future<void> scheduleSleepReminder(UserSettings settings) async {
    if (!settings.sleepReminderEnabled) return;

    final sleepTime = settings.sleepReminderTime;

    await AwesomeNotifications().createNotification(
      content: NotificationContent(
        id: sleepNotificationId,
        channelKey: sleepChannelKey,
        title: 'ƒê√£ ƒë·∫øn gi·ªù ƒëi ng·ªß! üò¥',
        body: 'H√£y ngh·ªâ ng∆°i ƒë·ªÉ ng√†y mai tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng nh√©!',
        notificationLayout: NotificationLayout.Default,
        payload: {'type': 'sleep'},
      ),
      schedule: NotificationCalendar(
        hour: sleepTime.hour,
        minute: sleepTime.minute,
        second: 0,
        millisecond: 0,
        repeats: true, // L·∫∑p l·∫°i h√†ng ng√†y
      ),
    );
  }

  /// H·ªßy nh·∫Øc vi·ªác c·ª• th·ªÉ
  static Future<void> cancelTaskReminder(int taskIndex) async {
    await AwesomeNotifications().cancel(_getTaskNotificationId(taskIndex));
  }

  /// H·ªßy nh·∫Øc gi·ªù ng·ªß
  static Future<void> cancelSleepReminder() async {
    await AwesomeNotifications().cancel(sleepNotificationId);
  }

  /// H·ªßy t·∫•t c·∫£ th√¥ng b√°o
  static Future<void> cancelAllNotifications() async {
    await AwesomeNotifications().cancelAll();
  }

  /// C·∫≠p nh·∫≠t t·∫•t c·∫£ task reminders
  /// G·ªçi khi user thay ƒë·ªïi setting ho·∫∑c th√™m/s·ª≠a task
  static Future<void> updateAllTaskReminders({
    required List<ScheduleTask> tasks,
    required UserSettings settings,
  }) async {
    // H·ªßy t·∫•t c·∫£ task notifications c≈©
    for (int i = 0; i < tasks.length; i++) {
      await cancelTaskReminder(i);
    }

    // Schedule l·∫°i n·∫øu enabled
    if (settings.taskReminderEnabled) {
      for (int i = 0; i < tasks.length; i++) {
        await scheduleTaskReminder(
          taskIndex: i,
          task: tasks[i],
          minutesBefore: settings.taskReminderTime,
        );
      }
    }
  }

  /// Ki·ªÉm tra quy·ªÅn notification
  static Future<bool> requestPermissions() async {
    final isAllowed = await AwesomeNotifications().isNotificationAllowed();
    
    if (!isAllowed) {
      return await AwesomeNotifications().requestPermissionToSendNotifications();
    }
    
    return true;
  }

  /// Ki·ªÉm tra xem notification c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
  static Future<bool> isNotificationAllowed() async {
    return await AwesomeNotifications().isNotificationAllowed();
  }
}